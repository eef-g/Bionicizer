<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Dj/4P///+H////h///8=
</value>
  </data>
</root>